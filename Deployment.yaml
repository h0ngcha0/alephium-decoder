apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alph-decoder
  name: alph-decoder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alph-decoder
  template:
    metadata:
      labels:
        app: alph-decoder
      name: alph-decoder
    spec:
      containers:
      - args:
        env:
        - name: JAVA_OPTS
          value: -Xms256m -Xmx3072m
        image: docker.io/liuhongchao/alph-decoder:v0.0.8
        imagePullPolicy: Always
        name: alph-decoder
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: alph-decoder
spec:
  selector:
    app: alph-decoder
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alph-decoder-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - alephium-decoder.softfork.se
    secretName: alph-decoder-it-tls
  rules:
  - host: alephium-decoder.softfork.se   # For this to work, A record needs to be created in the DNS service
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: alph-decoder
            port:
              number: 3000